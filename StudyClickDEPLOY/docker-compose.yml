# version: '3.8'
# Поднимаем два сервиса, django И node
networks:
  my_network:
services:
  postgres:
    # Так же разворачиваем с готового контейнера
    image: postgres:15-alpine
    container_name: postgres

    volumes:
     - postgres_volume:/var/lib/postgresql/data/

    env_file:
      - StudyClick/.env
    networks:
      - my_network

  ngnix:
    image: nginx:stable-alpine
    ports:
      - "80:80"
    volumes:
      - './nginx.conf:/etc/nginx/nginx.conf'
    depends_on:
      - django
      - node
    networks:
      - my_network
  django:

    build: ./StudyCLick

    container_name: djangoapp
    # перезапускать контейнер при завершении выполнения работы или при аварийном завершении
    restart: always
    # проброс портов внутрь контейнера, 8000 порт на хост машине будет проброшен внутрь контейнера на такой же 8000 порт
    ports:
      - 8000:8000
    # команда при старте контейнера
    command: sh -c "python manage.py makemigrations && python manage.py migrate && python manage.py runserver 0.0.0.0:8000"

    volumes:
      - django_static_volume:/usr/src/app/static
      - django_media_volume:/usr/src/app/media

    depends_on:
      - postgres
    env_file:
      - StudyCLick/.env
    networks:
      - my_network


  node:
    # Аналогично, build из ./reactapp/dockerfile
    build: ./StudyCLick-main
    # имя контейнера
    container_name: reactap
    # рестарт
    restart: always
    # порты
    ports:
      - 3000:3000
    # команда при запуске
    command: npm start
    # Зависимость. нет смысла ноде, если некому отдать ей данные. поэтому сначала стартуем сервис django, а за ней node
    depends_on:
      - django
    # Сеть та же, все контейнеры должны крутиться в однйо сети чтобы видеть друг друга.
    volumes:
      - ./StudyCLick-main/public/:/usr/src/app/public/
      - ./StudyCLick-main/src/:/usr/src/app/src/
    networks:
      - my_network

# создаём два volume для статики
volumes:
  postgres_volume:
  django_static_volume:
  django_media_volume: